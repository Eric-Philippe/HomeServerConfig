version: "3.8"

services:
  traefik:
    image: "traefik:v3.0"
    container_name: "traefik"
    command:
      - "--api.insecure=true"
      - "--providers.docker=true"
      - "--providers.docker.exposedbydefault=false"
      - "--entrypoints.web.address=:80"
      - "--entryPoints.websecure.address=:443"
      - "--certificatesresolvers.myresolver.acme.tlschallenge=true"
      - "--certificatesresolvers.myresolver.acme.email=${ACME_EMAIL}"
      - "--certificatesresolvers.myresolver.acme.storage=/letsencrypt/acme.json"
    ports:
      - "80:80"
      - "443:443"
      - "8080:8080"
    volumes:
      - "./letsencrypt:/letsencrypt"
      - "/var/run/docker.sock:/var/run/docker.sock:ro"
    networks:
      - traefik
    env_file:
      - .env
    restart: always

  prometheus:
    image: prom/prometheus
    container_name: prometheus
    volumes:
      - ./prometheus/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    ports:
      - "9090:9090"
    restart: always
    depends_on:
      - node_exporter
      - traefik
    networks:
      - traefik

  node_exporter:
    image: prom/node-exporter
    container_name: node_exporter
    ports:
      - "9100:9100"
    command:
      - "--path.rootfs=/host"
    volumes:
      - /:/host:ro,Z
    restart: always
    networks:
      - traefik

  cadvisor:
    image: gcr.io/cadvisor/cadvisor
    container_name: cadvisor
    ports:
      - "8081:8080"
    volumes:
      - /:/rootfs:ro
      - /var/run:/var/run:ro
      - /sys:/sys:ro
    restart: always
    networks:
      - traefik

  grafana:
    image: grafana/grafana
    container_name: grafana
    depends_on:
      - prometheus
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.grafana.rule=Host(`grafana.${DOMAIN}`)"
      - "traefik.http.routers.grafana.entrypoints=websecure"
      - "traefik.http.routers.grafana.tls=true"
      - "traefik.http.services.grafana.loadbalancer.server.port=3000"
      - "traefik.http.routers.grafana.tls.certresolver=myresolver"
    volumes:
      - grafana_data:/var/lib/grafana
    restart: always
    ports:
      - "3000:3000"
    networks:
      - traefik
    env_file:
      - .env

  portainer:
    image: portainer/portainer-ce:latest
    command: -H unix:///var/run/docker.sock
    restart: always
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - portainer_data:/data
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.frontend.rule=Host(`portainer.${DOMAIN}`)"
      - "traefik.http.routers.frontend.entrypoints=websecure"
      - "traefik.http.services.frontend.loadbalancer.server.port=9000"
      - "traefik.http.routers.frontend.service=frontend"
      - "traefik.http.routers.frontend.tls.certresolver=myresolver"
      - "traefik.http.routers.edge.rule=Host(`edge.${DOMAIN}`)"
      - "traefik.http.routers.edge.entrypoints=websecure"
      - "traefik.http.services.edge.loadbalancer.server.port=8000"
      - "traefik.http.routers.edge.service=edge"
      - "traefik.http.routers.edge.tls.certresolver=myresolver"
    networks:
      - traefik
    env_file:
      - .env

  tapo:
    container_name: tapo
    image: povilasid/p110-exporter
    depends_on:
      - traefik
      - prometheus
    volumes:
      - ./tapo/tapo.yaml:/app/tapo.yaml:ro
    ports:
      - 9333:9333
    environment:
      - TAPO_EMAIL=${TAPO_EMAIL}
      - TAPO_PASSWORD=${TAPO_PASSWORD}
      - PORT=${TAPO_PORT}
    restart: always
    networks:
      - traefik
    env_file:
      - .env

networks:
  traefik:
    external: true

volumes:
  prometheus_data:
  grafana_data:
  portainer_data:
